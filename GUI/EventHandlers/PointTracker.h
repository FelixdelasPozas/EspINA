/*
 * <one line to give the program's name and a brief idea of what it does.>
 * Copyright (C) 2015  Jorge Pe√±a Pastor <jpena@cesvima.upm.es>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef ESPINA_POINT_TRACKER_H
#define ESPINA_POINT_TRACKER_H

#include <GUI/EspinaGUI_Export.h>

// ESPINA
#include <Core/Utils/Vector3.hxx>
#include <GUI/View/EventHandler.h>

namespace ESPINA
{
  /** \class PointTracker
   * \brief Tracks a sequence of points generated by the user when it makes a stroke with the mouse on a view.
   *
   */
  class EspinaGUI_EXPORT PointTracker
  : public EventHandler
  {
      Q_OBJECT
    public:
      using Track = QList<NmVector3>;

    public:
      /** \brief PointTracker class constructor.
       *
       */
      explicit PointTracker();

      /** \brief PointTraker class virtual destructor.
       *
       */
      virtual ~PointTracker()
      {};

      virtual bool filterEvent(QEvent *e, RenderView *view = nullptr) override;

      /** \brief Enables/Disables point interpolation.
       * \param[in] active true to enable false otherwise.
       *
       */
      void setInterpolation(bool active);

      /** \brief Returns true if the point interpolation is enabled and false otherwise.
       *
       */
      bool interpolationEnabled() const
      { return m_interpolation; }

      /** \brief Sets the maximum distance between two consecutive track points. If this distance
       * is not met when building the track then the PointTracker will add more points to meet
       * this requirement.
       * \param[in] distance maximum distance between two consecutive track points.
       *
       */
      void setMaximumPointDistance(Nm distance);

      /** \brief Returns the maximum distance between two consecutive points of the tracks the
       * PointTracker will produce.
       *
       */
      Nm interpolationDistance() const
      { return std::sqrt(m_maxDistance2); }

      /** \brief Returns true if the PointTracker is in the middle of a track.
       *
       */
      bool isTracking() const;

    signals:
      void trackStarted(Track track, RenderView *view);
      void trackUpdated(Track track);
      void trackStopped(Track track, RenderView *view);;

    protected:
      /** \brief Called when a stroke starts.
       * \param[in] pos track point 2D position.
       * \param[in] view view under cursor.
       *
       */
      void startTrack(const QPoint &pos, RenderView *view);

      /** \brief Called when a stroke is updated.
       * \param[in] pos track point 2D position.
       *
       */
      void updateTrack(const QPoint &pos);

      /** \brief Called when a stroke ends.
       * \param[in] pos track point 2D position.
       *
       */
      void stopTrack(const QPoint &pos);

      /** \brief Interpolates p1 and p2 and generates extra points using the max distance.
       * \param[in] p1 point 3D coordinates.
       * \param[in] p2 point 3D coordinates.
       *
       */
      Track interpolate(const NmVector3 &p1, const NmVector3 &p2);

      /** \brief Returns the squared distance between the two given points.
       * \param[in] p1 point 3D coordinates.
       * \param[in] p2 point 3D coordinates.
       *
       */
      Nm distance2(const NmVector3 &p1, const NmVector3 &p2);

      bool  m_tracking;            /** true if tracking and false otherwise.     */
      bool  m_interpolation;       /** true if interpolation is being made.      */
      Nm    m_maxDistance2;        /** max distance between points of the track. */
      bool  m_distanceHasBeenSet;  /** true if max distance has been set.        */
      Track m_track;               /** track points group.                       */
      Track m_updatedTrack;        /** group of points in the update track step. */

      RenderView *m_view; /** view under event handler. */
  };

  using PointTrackerPtr  = PointTracker *;
  using PointTrackerSPtr = std::shared_ptr<PointTracker>;
}

#endif // ESPINA_POINT_TRACKER_H
